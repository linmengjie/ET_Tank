// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Enums
  public enum TankCamp {
    None = 0,
    Blue = 1,
    Red = 2,
  }

  #endregion

  #region Messages
  public partial class Actor_Test : pb::IMessage {
    private static readonly pb::MessageParser<Actor_Test> _parser = new pb::MessageParser<Actor_Test>(() => (Actor_Test)MessagePool.Instance.Fetch(typeof(Actor_Test)));
    public static pb::MessageParser<Actor_Test> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestRequest> _parser = new pb::MessageParser<C2M_TestRequest>(() => (C2M_TestRequest)MessagePool.Instance.Fetch(typeof(C2M_TestRequest)));
    public static pb::MessageParser<C2M_TestRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string request_ = "";
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Request.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      request_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestResponse> _parser = new pb::MessageParser<M2C_TestResponse>(() => (M2C_TestResponse)MessagePool.Instance.Fetch(typeof(M2C_TestResponse)));
    public static pb::MessageParser<M2C_TestResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string response_ = "";
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      response_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferRequest> _parser = new pb::MessageParser<Actor_TransferRequest>(() => (Actor_TransferRequest)MessagePool.Instance.Fetch(typeof(Actor_TransferRequest)));
    public static pb::MessageParser<Actor_TransferRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int mapIndex_;
    public int MapIndex {
      get { return mapIndex_; }
      set {
        mapIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferResponse> _parser = new pb::MessageParser<Actor_TransferResponse>(() => (Actor_TransferResponse)MessagePool.Instance.Fetch(typeof(Actor_TransferResponse)));
    public static pb::MessageParser<Actor_TransferResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_EnterMap> _parser = new pb::MessageParser<C2G_EnterMap>(() => (C2G_EnterMap)MessagePool.Instance.Fetch(typeof(C2G_EnterMap)));
    public static pb::MessageParser<C2G_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_EnterMap> _parser = new pb::MessageParser<G2C_EnterMap>(() => (G2C_EnterMap)MessagePool.Instance.Fetch(typeof(G2C_EnterMap)));
    public static pb::MessageParser<G2C_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unitId_;
    /// <summary>
    /// 自己的unit id
    /// </summary>
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    /// <summary>
    /// 所有的unit
    /// </summary>
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_EnterBattle : pb::IMessage {
    private static readonly pb::MessageParser<C2G_EnterBattle> _parser = new pb::MessageParser<C2G_EnterBattle>(() => (C2G_EnterBattle)MessagePool.Instance.Fetch(typeof(C2G_EnterBattle)));
    public static pb::MessageParser<C2G_EnterBattle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_EnterBattle : pb::IMessage {
    private static readonly pb::MessageParser<G2C_EnterBattle> _parser = new pb::MessageParser<G2C_EnterBattle>(() => (G2C_EnterBattle)MessagePool.Instance.Fetch(typeof(G2C_EnterBattle)));
    public static pb::MessageParser<G2C_EnterBattle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long tankId_;
    /// <summary>
    /// 自己的Tank id
    /// </summary>
    public long TankId {
      get { return tankId_; }
      set {
        tankId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TankFrameInfo> _repeated_tanks_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.TankFrameInfo.Parser);
    private pbc::RepeatedField<global::ETModel.TankFrameInfo> tanks_ = new pbc::RepeatedField<global::ETModel.TankFrameInfo>();
    /// <summary>
    /// 所有的Tank
    /// </summary>
    public pbc::RepeatedField<global::ETModel.TankFrameInfo> Tanks {
      get { return tanks_; }
      set { tanks_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TankId);
      }
      tanks_.WriteTo(output, _repeated_tanks_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TankId);
      }
      size += tanks_.CalculateSize(_repeated_tanks_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tankId_ = 0;
      for (int i = 0; i < tanks_.Count; i++) { MessagePool.Instance.Recycle(tanks_[i]); }
      tanks_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TankId = input.ReadInt64();
            break;
          }
          case 18: {
            tanks_.AddEntriesFrom(input, _repeated_tanks_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => (UnitInfo)MessagePool.Instance.Fetch(typeof(UnitInfo)));
    public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class TankFrameInfo : pb::IMessage {
    private static readonly pb::MessageParser<TankFrameInfo> _parser = new pb::MessageParser<TankFrameInfo>(() => (TankFrameInfo)MessagePool.Instance.Fetch(typeof(TankFrameInfo)));
    public static pb::MessageParser<TankFrameInfo> Parser { get { return _parser; } }

    private long tankId_;
    public long TankId {
      get { return tankId_; }
      set {
        tankId_ = value;
      }
    }

    private int pX_;
    /// <summary>
    /// 位置
    /// </summary>
    public int PX {
      get { return pX_; }
      set {
        pX_ = value;
      }
    }

    private int pY_;
    public int PY {
      get { return pY_; }
      set {
        pY_ = value;
      }
    }

    private int pZ_;
    public int PZ {
      get { return pZ_; }
      set {
        pZ_ = value;
      }
    }

    private int rX_;
    /// <summary>
    /// 朝向
    /// </summary>
    public int RX {
      get { return rX_; }
      set {
        rX_ = value;
      }
    }

    private int rY_;
    public int RY {
      get { return rY_; }
      set {
        rY_ = value;
      }
    }

    private int rZ_;
    public int RZ {
      get { return rZ_; }
      set {
        rZ_ = value;
      }
    }

    private int turretRY_;
    public int TurretRY {
      get { return turretRY_; }
      set {
        turretRY_ = value;
      }
    }

    private int gunRX_;
    public int GunRX {
      get { return gunRX_; }
      set {
        gunRX_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TankId);
      }
      if (PX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PX);
      }
      if (PY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PY);
      }
      if (PZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PZ);
      }
      if (RX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RX);
      }
      if (RY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RY);
      }
      if (RZ != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RZ);
      }
      if (TurretRY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TurretRY);
      }
      if (GunRX != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GunRX);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TankId);
      }
      if (PX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PX);
      }
      if (PY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PY);
      }
      if (PZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PZ);
      }
      if (RX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RX);
      }
      if (RY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RY);
      }
      if (RZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RZ);
      }
      if (TurretRY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretRY);
      }
      if (GunRX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRX);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tankId_ = 0;
      pX_ = 0;
      pY_ = 0;
      pZ_ = 0;
      rX_ = 0;
      rY_ = 0;
      rZ_ = 0;
      turretRY_ = 0;
      gunRX_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TankId = input.ReadInt64();
            break;
          }
          case 16: {
            PX = input.ReadInt32();
            break;
          }
          case 24: {
            PY = input.ReadInt32();
            break;
          }
          case 32: {
            PZ = input.ReadInt32();
            break;
          }
          case 40: {
            RX = input.ReadInt32();
            break;
          }
          case 48: {
            RY = input.ReadInt32();
            break;
          }
          case 56: {
            RZ = input.ReadInt32();
            break;
          }
          case 64: {
            TurretRY = input.ReadInt32();
            break;
          }
          case 72: {
            GunRX = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CreateUnits : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CreateUnits> _parser = new pb::MessageParser<M2C_CreateUnits>(() => (M2C_CreateUnits)MessagePool.Instance.Fetch(typeof(M2C_CreateUnits)));
    public static pb::MessageParser<M2C_CreateUnits> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    /// <summary>
    /// 所有的unit
    /// </summary>
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class TankInfoFirstEnter : pb::IMessage {
    private static readonly pb::MessageParser<TankInfoFirstEnter> _parser = new pb::MessageParser<TankInfoFirstEnter>(() => (TankInfoFirstEnter)MessagePool.Instance.Fetch(typeof(TankInfoFirstEnter)));
    public static pb::MessageParser<TankInfoFirstEnter> Parser { get { return _parser; } }

    private global::ETModel.TankFrameInfo tankFrameInfo_;
    public global::ETModel.TankFrameInfo TankFrameInfo {
      get { return tankFrameInfo_; }
      set {
        tankFrameInfo_ = value;
      }
    }

    private global::ETModel.TankCamp tankCamp_ = 0;
    public global::ETModel.TankCamp TankCamp {
      get { return tankCamp_; }
      set {
        tankCamp_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int maxHpBase_;
    public int MaxHpBase {
      get { return maxHpBase_; }
      set {
        maxHpBase_ = value;
      }
    }

    private int hpBase_;
    public int HpBase {
      get { return hpBase_; }
      set {
        hpBase_ = value;
      }
    }

    private int atkBase_;
    public int AtkBase {
      get { return atkBase_; }
      set {
        atkBase_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tankFrameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TankFrameInfo);
      }
      if (TankCamp != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TankCamp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (MaxHpBase != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHpBase);
      }
      if (HpBase != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HpBase);
      }
      if (AtkBase != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AtkBase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (tankFrameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TankFrameInfo);
      }
      if (TankCamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TankCamp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MaxHpBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHpBase);
      }
      if (HpBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpBase);
      }
      if (AtkBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkBase);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (tankFrameInfo_ != null) MessagePool.Instance.Recycle(tankFrameInfo_); tankFrameInfo_ = null;
      name_ = "";
      maxHpBase_ = 0;
      hpBase_ = 0;
      atkBase_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tankFrameInfo_ == null) {
              tankFrameInfo_ = new global::ETModel.TankFrameInfo();
            }
            input.ReadMessage(tankFrameInfo_);
            break;
          }
          case 16: {
            tankCamp_ = (global::ETModel.TankCamp) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            MaxHpBase = input.ReadInt32();
            break;
          }
          case 40: {
            HpBase = input.ReadInt32();
            break;
          }
          case 48: {
            AtkBase = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class B2C_CreateTanks : pb::IMessage {
    private static readonly pb::MessageParser<B2C_CreateTanks> _parser = new pb::MessageParser<B2C_CreateTanks>(() => (B2C_CreateTanks)MessagePool.Instance.Fetch(typeof(B2C_CreateTanks)));
    public static pb::MessageParser<B2C_CreateTanks> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TankInfoFirstEnter> _repeated_tanks_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TankInfoFirstEnter.Parser);
    private pbc::RepeatedField<global::ETModel.TankInfoFirstEnter> tanks_ = new pbc::RepeatedField<global::ETModel.TankInfoFirstEnter>();
    /// <summary>
    /// 所有的unit
    /// </summary>
    public pbc::RepeatedField<global::ETModel.TankInfoFirstEnter> Tanks {
      get { return tanks_; }
      set { tanks_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tanks_.WriteTo(output, _repeated_tanks_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += tanks_.CalculateSize(_repeated_tanks_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < tanks_.Count; i++) { MessagePool.Instance.Recycle(tanks_[i]); }
      tanks_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tanks_.AddEntriesFrom(input, _repeated_tanks_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Frame_ClickMap : pb::IMessage {
    private static readonly pb::MessageParser<Frame_ClickMap> _parser = new pb::MessageParser<Frame_ClickMap>(() => (Frame_ClickMap)MessagePool.Instance.Fetch(typeof(Frame_ClickMap)));
    public static pb::MessageParser<Frame_ClickMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2B_TankFrameInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2B_TankFrameInfo> _parser = new pb::MessageParser<C2B_TankFrameInfo>(() => (C2B_TankFrameInfo)MessagePool.Instance.Fetch(typeof(C2B_TankFrameInfo)));
    public static pb::MessageParser<C2B_TankFrameInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.TankFrameInfo tankFrameInfo_;
    public global::ETModel.TankFrameInfo TankFrameInfo {
      get { return tankFrameInfo_; }
      set {
        tankFrameInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (tankFrameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TankFrameInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (tankFrameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TankFrameInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (tankFrameInfo_ != null) MessagePool.Instance.Recycle(tankFrameInfo_); tankFrameInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tankFrameInfo_ == null) {
              tankFrameInfo_ = new global::ETModel.TankFrameInfo();
            }
            input.ReadMessage(tankFrameInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class B2C_TankFrameInfos : pb::IMessage {
    private static readonly pb::MessageParser<B2C_TankFrameInfos> _parser = new pb::MessageParser<B2C_TankFrameInfos>(() => (B2C_TankFrameInfos)MessagePool.Instance.Fetch(typeof(B2C_TankFrameInfos)));
    public static pb::MessageParser<B2C_TankFrameInfos> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.TankFrameInfo> _repeated_tankFrameInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.TankFrameInfo.Parser);
    private pbc::RepeatedField<global::ETModel.TankFrameInfo> tankFrameInfos_ = new pbc::RepeatedField<global::ETModel.TankFrameInfo>();
    public pbc::RepeatedField<global::ETModel.TankFrameInfo> TankFrameInfos {
      get { return tankFrameInfos_; }
      set { tankFrameInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      tankFrameInfos_.WriteTo(output, _repeated_tankFrameInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += tankFrameInfos_.CalculateSize(_repeated_tankFrameInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < tankFrameInfos_.Count; i++) { MessagePool.Instance.Recycle(tankFrameInfos_[i]); }
      tankFrameInfos_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tankFrameInfos_.AddEntriesFrom(input, _repeated_tankFrameInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PathfindingResult : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PathfindingResult> _parser = new pb::MessageParser<M2C_PathfindingResult>(() => (M2C_PathfindingResult)MessagePool.Instance.Fetch(typeof(M2C_PathfindingResult)));
    public static pb::MessageParser<M2C_PathfindingResult> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private static readonly pb::FieldCodec<float> _repeated_xs_codec
        = pb::FieldCodec.ForFloat(42);
    private pbc::RepeatedField<float> xs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Xs {
      get { return xs_; }
      set { xs_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_ys_codec
        = pb::FieldCodec.ForFloat(50);
    private pbc::RepeatedField<float> ys_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Ys {
      get { return ys_; }
      set { ys_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_zs_codec
        = pb::FieldCodec.ForFloat(58);
    private pbc::RepeatedField<float> zs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Zs {
      get { return zs_; }
      set { zs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      xs_.WriteTo(output, _repeated_xs_codec);
      ys_.WriteTo(output, _repeated_ys_codec);
      zs_.WriteTo(output, _repeated_zs_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      size += xs_.CalculateSize(_repeated_xs_codec);
      size += ys_.CalculateSize(_repeated_ys_codec);
      size += zs_.CalculateSize(_repeated_zs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      xs_.Clear();
      ys_.Clear();
      zs_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            xs_.AddEntriesFrom(input, _repeated_xs_codec);
            break;
          }
          case 50:
          case 53: {
            ys_.AddEntriesFrom(input, _repeated_ys_codec);
            break;
          }
          case 58:
          case 61: {
            zs_.AddEntriesFrom(input, _repeated_zs_codec);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Ping : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Ping> _parser = new pb::MessageParser<C2R_Ping>(() => (C2R_Ping)MessagePool.Instance.Fetch(typeof(C2R_Ping)));
    public static pb::MessageParser<C2R_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Ping : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Ping> _parser = new pb::MessageParser<R2C_Ping>(() => (R2C_Ping)MessagePool.Instance.Fetch(typeof(R2C_Ping)));
    public static pb::MessageParser<R2C_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Test : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Test> _parser = new pb::MessageParser<G2C_Test>(() => (G2C_Test)MessagePool.Instance.Fetch(typeof(G2C_Test)));
    public static pb::MessageParser<G2C_Test> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class C2M_Reload : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Reload> _parser = new pb::MessageParser<C2M_Reload>(() => (C2M_Reload)MessagePool.Instance.Fetch(typeof(C2M_Reload)));
    public static pb::MessageParser<C2M_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Reload : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Reload> _parser = new pb::MessageParser<M2C_Reload>(() => (M2C_Reload)MessagePool.Instance.Fetch(typeof(M2C_Reload)));
    public static pb::MessageParser<M2C_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2B_Shoot : pb::IMessage {
    private static readonly pb::MessageParser<C2B_Shoot> _parser = new pb::MessageParser<C2B_Shoot>(() => (C2B_Shoot)MessagePool.Instance.Fetch(typeof(C2B_Shoot)));
    public static pb::MessageParser<C2B_Shoot> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pX_;
    public int PX {
      get { return pX_; }
      set {
        pX_ = value;
      }
    }

    private int pY_;
    public int PY {
      get { return pY_; }
      set {
        pY_ = value;
      }
    }

    private int pZ_;
    public int PZ {
      get { return pZ_; }
      set {
        pZ_ = value;
      }
    }

    private int rX_;
    public int RX {
      get { return rX_; }
      set {
        rX_ = value;
      }
    }

    private int rY_;
    public int RY {
      get { return rY_; }
      set {
        rY_ = value;
      }
    }

    private int rZ_;
    public int RZ {
      get { return rZ_; }
      set {
        rZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PX);
      }
      if (PY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PY);
      }
      if (PZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PZ);
      }
      if (RX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RX);
      }
      if (RY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RY);
      }
      if (RZ != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (PX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PX);
      }
      if (PY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PY);
      }
      if (PZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PZ);
      }
      if (RX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RX);
      }
      if (RY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RY);
      }
      if (RZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RZ);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pX_ = 0;
      pY_ = 0;
      pZ_ = 0;
      rX_ = 0;
      rY_ = 0;
      rZ_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PX = input.ReadInt32();
            break;
          }
          case 16: {
            PY = input.ReadInt32();
            break;
          }
          case 24: {
            PZ = input.ReadInt32();
            break;
          }
          case 32: {
            RX = input.ReadInt32();
            break;
          }
          case 40: {
            RY = input.ReadInt32();
            break;
          }
          case 48: {
            RZ = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class B2C_Shoot : pb::IMessage {
    private static readonly pb::MessageParser<B2C_Shoot> _parser = new pb::MessageParser<B2C_Shoot>(() => (B2C_Shoot)MessagePool.Instance.Fetch(typeof(B2C_Shoot)));
    public static pb::MessageParser<B2C_Shoot> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long tankId_;
    public long TankId {
      get { return tankId_; }
      set {
        tankId_ = value;
      }
    }

    private int pX_;
    public int PX {
      get { return pX_; }
      set {
        pX_ = value;
      }
    }

    private int pY_;
    public int PY {
      get { return pY_; }
      set {
        pY_ = value;
      }
    }

    private int pZ_;
    public int PZ {
      get { return pZ_; }
      set {
        pZ_ = value;
      }
    }

    private int rX_;
    public int RX {
      get { return rX_; }
      set {
        rX_ = value;
      }
    }

    private int rY_;
    public int RY {
      get { return rY_; }
      set {
        rY_ = value;
      }
    }

    private int rZ_;
    public int RZ {
      get { return rZ_; }
      set {
        rZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TankId);
      }
      if (PX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PX);
      }
      if (PY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PY);
      }
      if (PZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PZ);
      }
      if (RX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RX);
      }
      if (RY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RY);
      }
      if (RZ != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TankId);
      }
      if (PX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PX);
      }
      if (PY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PY);
      }
      if (PZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PZ);
      }
      if (RX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RX);
      }
      if (RY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RY);
      }
      if (RZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RZ);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tankId_ = 0;
      pX_ = 0;
      pY_ = 0;
      pZ_ = 0;
      rX_ = 0;
      rY_ = 0;
      rZ_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TankId = input.ReadInt64();
            break;
          }
          case 16: {
            PX = input.ReadInt32();
            break;
          }
          case 24: {
            PY = input.ReadInt32();
            break;
          }
          case 32: {
            PZ = input.ReadInt32();
            break;
          }
          case 40: {
            RX = input.ReadInt32();
            break;
          }
          case 48: {
            RY = input.ReadInt32();
            break;
          }
          case 56: {
            RZ = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2B_AttackTankRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2B_AttackTankRequest> _parser = new pb::MessageParser<C2B_AttackTankRequest>(() => (C2B_AttackTankRequest)MessagePool.Instance.Fetch(typeof(C2B_AttackTankRequest)));
    public static pb::MessageParser<C2B_AttackTankRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long sourceTankId_;
    /// <summary>
    /// 源坦克id
    /// </summary>
    public long SourceTankId {
      get { return sourceTankId_; }
      set {
        sourceTankId_ = value;
      }
    }

    private long targetTankId_;
    /// <summary>
    /// 目标坦克id
    /// </summary>
    public long TargetTankId {
      get { return targetTankId_; }
      set {
        targetTankId_ = value;
      }
    }

    private int damage_;
    /// <summary>
    /// 攻击力
    /// </summary>
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceTankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SourceTankId);
      }
      if (TargetTankId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetTankId);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Damage);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SourceTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceTankId);
      }
      if (TargetTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetTankId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sourceTankId_ = 0;
      targetTankId_ = 0;
      damage_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceTankId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetTankId = input.ReadInt64();
            break;
          }
          case 32: {
            Damage = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class B2C_AttackTankResponse : pb::IMessage {
    private static readonly pb::MessageParser<B2C_AttackTankResponse> _parser = new pb::MessageParser<B2C_AttackTankResponse>(() => (B2C_AttackTankResponse)MessagePool.Instance.Fetch(typeof(B2C_AttackTankResponse)));
    public static pb::MessageParser<B2C_AttackTankResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long sourceTankId_;
    /// <summary>
    /// 攻击者
    /// </summary>
    public long SourceTankId {
      get { return sourceTankId_; }
      set {
        sourceTankId_ = value;
      }
    }

    private long targetTankId_;
    /// <summary>
    /// 目标坦克id
    /// </summary>
    public long TargetTankId {
      get { return targetTankId_; }
      set {
        targetTankId_ = value;
      }
    }

    private int currentHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    public int CurrentHp {
      get { return currentHp_; }
      set {
        currentHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceTankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SourceTankId);
      }
      if (TargetTankId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetTankId);
      }
      if (CurrentHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentHp);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (SourceTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceTankId);
      }
      if (TargetTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetTankId);
      }
      if (CurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sourceTankId_ = 0;
      targetTankId_ = 0;
      currentHp_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceTankId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetTankId = input.ReadInt64();
            break;
          }
          case 24: {
            CurrentHp = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class B2C_AttackTank : pb::IMessage {
    private static readonly pb::MessageParser<B2C_AttackTank> _parser = new pb::MessageParser<B2C_AttackTank>(() => (B2C_AttackTank)MessagePool.Instance.Fetch(typeof(B2C_AttackTank)));
    public static pb::MessageParser<B2C_AttackTank> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long sourceTankId_;
    /// <summary>
    /// 源坦克id
    /// </summary>
    public long SourceTankId {
      get { return sourceTankId_; }
      set {
        sourceTankId_ = value;
      }
    }

    private long targetTankId_;
    /// <summary>
    /// 目标坦克id
    /// </summary>
    public long TargetTankId {
      get { return targetTankId_; }
      set {
        targetTankId_ = value;
      }
    }

    private int currentHp_;
    /// <summary>
    /// 当前血量
    /// </summary>
    public int CurrentHp {
      get { return currentHp_; }
      set {
        currentHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceTankId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SourceTankId);
      }
      if (TargetTankId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetTankId);
      }
      if (CurrentHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentHp);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SourceTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceTankId);
      }
      if (TargetTankId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetTankId);
      }
      if (CurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sourceTankId_ = 0;
      targetTankId_ = 0;
      currentHp_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceTankId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetTankId = input.ReadInt64();
            break;
          }
          case 24: {
            CurrentHp = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
